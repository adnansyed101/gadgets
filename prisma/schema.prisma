generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Customer
  Seller
  Admin
}

model Users {
  id            Int            @id @default(autoincrement())
  image         String
  name          String
  username      String         @unique
  email         String         @unique
  phone_number  String         @unique
  role          Role           @default(Customer)
  addresses     Addresses[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  wishlist      Wishlist[]
  cart          Cart[]
  order_details OrderDetails[]
}

model Addresses {
  id             Int      @id @default(autoincrement())
  user           Users    @relation(fields: [userId], references: [id])
  userId         Int
  address_line_1 String
  address_line_2 String
  country        String
  city           String
  postal_code    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Categories {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  sub_categories SubCategories[]
}

model SubCategories {
  id           Int        @id @default(autoincrement())
  name         String
  category     Categories @relation(fields: [categoriesId], references: [id])
  categoriesId Int // This reference the parent of the sub category
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  products     Products[]
}

model Products {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  image           String
  quantity         Int
  price           Int
  sub_category    SubCategories @relation(fields: [sub_category_id], references: [id])
  sub_category_id Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  wishlist        Wishlist[]
  cart_item       CartItem[]
  order_item      OrderItem[]
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  product    Products @relation(fields: [product_id], references: [id])
  product_id Int
  user       Users    @relation(fields: [user_id], references: [id])
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cart {
  id         Int        @id @default(autoincrement())
  user       Users      @relation(fields: [user_id], references: [id])
  user_id    Int
  total      Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cart_item  CartItem[]
}

model CartItem {
  id          Int      @id @default(autoincrement())
  cart        Cart     @relation(fields: [cart_id], references: [id])
  cart_id     Int
  product     Products @relation(fields: [products_id], references: [id])
  products_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model PaymentDetails {
  id         Int          @id @default(autoincrement())
  orders     OrderDetails @relation(fields: [oder_id], references: [id])
  oder_id    Int
  amount     Int
  provider   String
  status     String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model OrderDetails {
  id              Int              @id @default(autoincrement())
  user            Users            @relation(fields: [user_id], references: [id])
  user_id         Int
  payment_id      String
  total           Int
  payment_details PaymentDetails[]
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  OrderItem       OrderItem[]
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  order_details OrderDetails @relation(fields: [order_id], references: [id])
  order_id      Int
  product       Products     @relation(fields: [product_id], references: [id])
  product_id    Int
  quantity      Int
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}
